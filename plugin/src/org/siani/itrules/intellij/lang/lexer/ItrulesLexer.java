/* The following code was generated by JFlex 1.4.3 on 8/04/15 7:26 */

package org.siani.itrules.intellij.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.siani.itrules.intellij.lang.psi.ItrulesTypes;
import com.intellij.psi.TokenType;
import java.util.LinkedList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 8/04/15 7:26 from the specification file
 * <tt>/Users/oroncal/workspace/itrules/plugin/src/org/siani/itrules/intellij/lang/lexer/itrules.flex</tt>
 */
class ItrulesLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\13\1\0\1\0\3\0\16\13\10\0\1\1\10\0\1\13\2\0"+
    "\12\13\7\0\32\14\1\2\1\0\1\3\1\0\1\14\1\0\3\14"+
    "\1\4\1\5\1\6\5\14\1\11\1\14\1\12\3\14\1\7\2\14"+
    "\1\10\5\14\4\0\41\13\2\0\4\14\4\0\1\14\2\0\1\13"+
    "\7\0\1\14\4\0\1\14\5\0\27\14\1\0\37\14\1\0\u01ca\14"+
    "\4\0\14\14\16\0\5\14\7\0\1\14\1\0\1\14\21\0\160\13"+
    "\5\14\1\0\2\14\2\0\4\14\10\0\1\14\1\0\3\14\1\0"+
    "\1\14\1\0\24\14\1\0\123\14\1\0\213\14\1\0\5\13\2\0"+
    "\236\14\11\0\46\14\2\0\1\14\7\0\47\14\7\0\1\14\1\0"+
    "\55\13\1\0\1\13\1\0\2\13\1\0\2\13\1\0\1\13\10\0"+
    "\33\14\5\0\3\14\15\0\5\13\6\0\1\14\4\0\13\13\5\0"+
    "\53\14\37\13\4\0\2\14\1\13\143\14\1\0\1\14\10\13\1\0"+
    "\6\13\2\14\2\13\1\0\4\13\2\14\12\13\3\14\2\0\1\14"+
    "\17\0\1\13\1\14\1\13\36\14\33\13\2\0\131\14\13\13\1\14"+
    "\16\0\12\13\41\14\11\13\2\14\4\0\1\14\5\0\26\14\4\13"+
    "\1\14\11\13\1\14\3\13\1\14\5\13\22\0\31\14\3\13\104\0"+
    "\1\14\1\0\13\14\67\0\33\13\1\0\4\13\66\14\3\13\1\14"+
    "\22\13\1\14\7\13\12\14\2\13\2\0\12\13\1\0\7\14\1\0"+
    "\7\14\1\0\3\13\1\0\10\14\2\0\2\14\2\0\26\14\1\0"+
    "\7\14\1\0\1\14\3\0\4\14\2\0\1\13\1\14\7\13\2\0"+
    "\2\13\2\0\3\13\1\14\10\0\1\13\4\0\2\14\1\0\3\14"+
    "\2\13\2\0\12\13\4\14\7\0\1\14\5\0\3\13\1\0\6\14"+
    "\4\0\2\14\2\0\26\14\1\0\7\14\1\0\2\14\1\0\2\14"+
    "\1\0\2\14\2\0\1\13\1\0\5\13\4\0\2\13\2\0\3\13"+
    "\3\0\1\13\7\0\4\14\1\0\1\14\7\0\14\13\3\14\1\13"+
    "\13\0\3\13\1\0\11\14\1\0\3\14\1\0\26\14\1\0\7\14"+
    "\1\0\2\14\1\0\5\14\2\0\1\13\1\14\10\13\1\0\3\13"+
    "\1\0\3\13\2\0\1\14\17\0\2\14\2\13\2\0\12\13\1\0"+
    "\1\14\17\0\3\13\1\0\10\14\2\0\2\14\2\0\26\14\1\0"+
    "\7\14\1\0\2\14\1\0\5\14\2\0\1\13\1\14\7\13\2\0"+
    "\2\13\2\0\3\13\10\0\2\13\4\0\2\14\1\0\3\14\2\13"+
    "\2\0\12\13\1\0\1\14\20\0\1\13\1\14\1\0\6\14\3\0"+
    "\3\14\1\0\4\14\3\0\2\14\1\0\1\14\1\0\2\14\3\0"+
    "\2\14\3\0\3\14\3\0\14\14\4\0\5\13\3\0\3\13\1\0"+
    "\4\13\2\0\1\14\6\0\1\13\16\0\12\13\11\0\1\14\7\0"+
    "\3\13\1\0\10\14\1\0\3\14\1\0\27\14\1\0\12\14\1\0"+
    "\5\14\3\0\1\14\7\13\1\0\3\13\1\0\4\13\7\0\2\13"+
    "\1\0\2\14\6\0\2\14\2\13\2\0\12\13\22\0\2\13\1\0"+
    "\10\14\1\0\3\14\1\0\27\14\1\0\12\14\1\0\5\14\2\0"+
    "\1\13\1\14\7\13\1\0\3\13\1\0\4\13\7\0\2\13\7\0"+
    "\1\14\1\0\2\14\2\13\2\0\12\13\1\0\2\14\17\0\2\13"+
    "\1\0\10\14\1\0\3\14\1\0\51\14\2\0\1\14\7\13\1\0"+
    "\3\13\1\0\4\13\1\14\10\0\1\13\10\0\2\14\2\13\2\0"+
    "\12\13\12\0\6\14\2\0\2\13\1\0\22\14\3\0\30\14\1\0"+
    "\11\14\1\0\1\14\2\0\7\14\3\0\1\13\4\0\6\13\1\0"+
    "\1\13\1\0\10\13\22\0\2\13\15\0\60\14\1\13\2\14\7\13"+
    "\4\0\10\14\10\13\1\0\12\13\47\0\2\14\1\0\1\14\2\0"+
    "\2\14\1\0\1\14\2\0\1\14\6\0\4\14\1\0\7\14\1\0"+
    "\3\14\1\0\1\14\1\0\1\14\2\0\2\14\1\0\4\14\1\13"+
    "\2\14\6\13\1\0\2\13\1\14\2\0\5\14\1\0\1\14\1\0"+
    "\6\13\2\0\12\13\2\0\4\14\40\0\1\14\27\0\2\13\6\0"+
    "\12\13\13\0\1\13\1\0\1\13\1\0\1\13\4\0\2\13\10\14"+
    "\1\0\44\14\4\0\24\13\1\0\2\13\5\14\13\13\1\0\44\13"+
    "\11\0\1\13\71\0\53\14\24\13\1\14\12\13\6\0\6\14\4\13"+
    "\4\14\3\13\1\14\3\13\2\14\7\13\3\14\4\13\15\14\14\13"+
    "\1\14\17\13\2\0\46\14\1\0\1\14\5\0\1\14\2\0\53\14"+
    "\1\0\u014d\14\1\0\4\14\2\0\7\14\1\0\1\14\1\0\4\14"+
    "\2\0\51\14\1\0\4\14\2\0\41\14\1\0\4\14\2\0\7\14"+
    "\1\0\1\14\1\0\4\14\2\0\17\14\1\0\71\14\1\0\4\14"+
    "\2\0\103\14\2\0\3\13\40\0\20\14\20\0\125\14\14\0\u026c\14"+
    "\2\0\21\14\1\0\32\14\5\0\113\14\3\0\3\14\17\0\15\14"+
    "\1\0\4\14\3\13\13\0\22\14\3\13\13\0\22\14\2\13\14\0"+
    "\15\14\1\0\3\14\1\0\2\13\14\0\64\14\40\13\3\0\1\14"+
    "\3\0\2\14\1\13\2\0\12\13\41\0\3\13\2\0\12\13\6\0"+
    "\130\14\10\0\51\14\1\13\1\14\5\0\106\14\12\0\35\14\3\0"+
    "\14\13\4\0\14\13\12\0\12\13\36\14\2\0\5\14\13\0\54\14"+
    "\4\0\21\13\7\14\2\13\6\0\12\13\46\0\27\14\5\13\4\0"+
    "\65\14\12\13\1\0\35\13\2\0\13\13\6\0\12\13\15\0\1\14"+
    "\130\0\5\13\57\14\21\13\7\14\4\0\12\13\21\0\11\13\14\0"+
    "\3\13\36\14\15\13\2\14\12\13\54\14\16\13\14\0\44\14\24\13"+
    "\10\0\12\13\3\0\3\14\12\13\44\14\122\0\3\13\1\0\25\13"+
    "\4\14\1\13\4\14\3\13\2\14\11\0\300\14\47\13\25\0\4\13"+
    "\u0116\14\2\0\6\14\2\0\46\14\2\0\6\14\2\0\10\14\1\0"+
    "\1\14\1\0\1\14\1\0\1\14\1\0\37\14\2\0\65\14\1\0"+
    "\7\14\1\0\1\14\3\0\3\14\1\0\7\14\3\0\4\14\2\0"+
    "\6\14\4\0\15\14\5\0\3\14\1\0\7\14\16\0\5\13\32\0"+
    "\5\13\20\0\2\14\23\0\1\14\13\0\5\13\5\0\6\13\1\0"+
    "\1\14\15\0\1\14\20\0\15\14\3\0\33\14\25\0\15\13\4\0"+
    "\1\13\3\0\14\13\21\0\1\14\4\0\1\14\2\0\12\14\1\0"+
    "\1\14\3\0\5\14\6\0\1\14\1\0\1\14\1\0\1\14\1\0"+
    "\4\14\1\0\13\14\2\0\4\14\5\0\5\14\4\0\1\14\21\0"+
    "\51\14\u0a77\0\57\14\1\0\57\14\1\0\205\14\6\0\4\14\3\13"+
    "\2\14\14\0\46\14\1\0\1\14\5\0\1\14\2\0\70\14\7\0"+
    "\1\14\17\0\1\13\27\14\11\0\7\14\1\0\7\14\1\0\7\14"+
    "\1\0\7\14\1\0\7\14\1\0\7\14\1\0\7\14\1\0\7\14"+
    "\1\0\40\13\57\0\1\14\u01d5\0\3\14\31\0\11\14\6\13\1\0"+
    "\5\14\2\0\5\14\4\0\126\14\2\0\2\13\2\0\3\14\1\0"+
    "\132\14\1\0\4\14\5\0\51\14\3\0\136\14\21\0\33\14\65\0"+
    "\20\14\u0200\0\u19b6\14\112\0\u51cd\14\63\0\u048d\14\103\0\56\14\2\0"+
    "\u010d\14\3\0\20\14\12\13\2\14\24\0\57\14\1\13\4\0\12\13"+
    "\1\0\31\14\7\0\1\13\120\14\2\13\45\0\11\14\2\0\147\14"+
    "\2\0\4\14\1\0\4\14\14\0\13\14\115\0\12\14\1\13\3\14"+
    "\1\13\4\14\1\13\27\14\5\13\20\0\1\14\7\0\64\14\14\0"+
    "\2\13\62\14\21\13\13\0\12\13\6\0\22\13\6\14\3\0\1\14"+
    "\4\0\12\13\34\14\10\13\2\0\27\14\15\13\14\0\35\14\3\0"+
    "\4\13\57\14\16\13\16\0\1\14\12\13\46\0\51\14\16\13\11\0"+
    "\3\14\1\13\10\14\2\13\2\0\12\13\6\0\27\14\3\0\1\14"+
    "\1\13\4\0\60\14\1\13\1\14\3\13\2\14\2\13\5\14\2\13"+
    "\1\14\1\13\1\14\30\0\3\14\2\0\13\14\5\13\2\0\3\14"+
    "\2\13\12\0\6\14\2\0\6\14\2\0\6\14\11\0\7\14\1\0"+
    "\7\14\221\0\43\14\10\13\1\0\2\13\2\0\12\13\6\0\u2ba4\14"+
    "\14\0\27\14\4\0\61\14\u2104\0\u016e\14\2\0\152\14\46\0\7\14"+
    "\14\0\5\14\5\0\1\14\1\13\12\14\1\0\15\14\1\0\5\14"+
    "\1\0\1\14\1\0\2\14\1\0\2\14\1\0\154\14\41\0\u016b\14"+
    "\22\0\100\14\2\0\66\14\50\0\15\14\3\0\20\13\20\0\7\13"+
    "\14\0\2\14\30\0\3\14\31\0\1\14\6\0\5\14\1\0\207\14"+
    "\2\0\1\13\4\0\1\14\13\0\12\13\7\0\32\14\4\0\1\14"+
    "\1\0\32\14\13\0\131\14\3\0\6\14\2\0\6\14\2\0\6\14"+
    "\2\0\3\14\3\0\2\14\3\0\2\14\22\0\3\13\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\2\1\1\4\1\5\12\0"+
    "\1\6\1\7";

  private static int [] zzUnpackAction() {
    int [] result = new int[21];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\15\0\32\0\15\0\15\0\47\0\64\0\101"+
    "\0\15\0\116\0\133\0\150\0\165\0\202\0\217\0\234"+
    "\0\251\0\266\0\303\0\15\0\15";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[21];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\7\2\16\0"+
    "\1\10\2\11\7\10\1\0\1\10\5\0\1\12\21\0"+
    "\1\13\3\0\1\10\2\0\11\10\6\0\1\14\12\0"+
    "\1\15\17\0\1\16\14\0\1\17\15\0\1\20\14\0"+
    "\1\21\15\0\1\22\14\0\1\23\10\0\1\24\14\0"+
    "\1\25\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\2\11\3\1\1\11\12\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[21];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;


  ItrulesLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  ItrulesLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { return ItrulesTypes.MARK;
          }
        case 8: break;
        case 5: 
          { return ItrulesTypes.SCAPED_CHAR;
          }
        case 9: break;
        case 3: 
          { return ItrulesTypes.RIGHT_SQUARE;
          }
        case 10: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 11: break;
        case 7: 
          { return ItrulesTypes.RULE_END;
          }
        case 12: break;
        case 6: 
          { return ItrulesTypes.RULE_BEGIN;
          }
        case 13: break;
        case 2: 
          { return ItrulesTypes.LEFT_SQUARE;
          }
        case 14: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
