def type(ruleset)
	[package $package;]

	import org.siani.itrules.*;

	public class $name+FirstUpperCase~Template extends Template {

		public $name+FirstUpperCase~Template(Locale locale, Encoding encoding) {
			super(locale, encoding);
		}

		public $name+FirstUpperCase~Template() {
            super(Locale.getDefault(), Encoding.getDefault());
        }

	    @Override
	    public void definition() {
	        add(
	            $rule...[,$NL]
	        );
	    }
	}
end

def type(rule) trigger(rule)
	rule()[.add($conditions...[, ])]$tokens...[]
end

def type(condition) trigger(conditions)
	$negated(condition($name+string, $parameter+string))
end

def trigger(negated) value(true)
	not
end

def trigger(negated)
end

def type(token) type(literal) trigger(tokens)
	.add(literal($literal+string))
end

def type(token) type(mark) trigger(tokens)
	.add(mark($name+string[, $options+string...[, ]])[.multiple($separator+string)])
end

def type(token) type(expression) trigger(tokens)
	.add(expression()$tokens...[])
end