root:{
 	_type: "Class"
	name: "Customer"
	final: "final"
	superclass:"Super"
	interface: ["Person","Gay"]
	attribute: [
		{
			_type: Attribute, ReadOnly
			name: "Name",
			type: "String"
		}
		{
			_type: "Attribute",
			readOnly: true,
			name: "FamilyName",
			type: "String"
		}
		{
			_type: "Attribute",
			const: true,
			name: "MaxAge",
			type: "Integer",
			default: 100
		}
	]
}

.itr

-------------------------------------------------------------------------
defrule type(Person)
$Name was born in $Country on $Birthday.
His birthday is on $Birthday(DayMonth).
endrule

defrule type(Date) type(Birthday) attr(asshole)
$Value
endrule

defrule type(Date) type(DayMonth)
$Value
endrule
-------------------------------------------------------------------------
defrule type(Class)
<class name="$name" type="$type">
	$superclass+Superclass
	$interface+Interface...[$NL]

</class>
endrule

defrule type(String) trigger(String+Superclass)
<superclass name="$value" />
endrule

defrule type(String) trigger(String+Interface)
<interface name="$value" />
endrule

-------------------------------------------------------------------------
defrule type(Class)
public class [$static ][$final ]$name [extends $SuperClass][implements $Interface...[, ]]{
	$attribute+Const...[$NL]
	$attribute+Field...[$NL]

	$attribute+Getter...[$NL]
	$attribute+Setter...[$NL]

	public $Name($attribute+Injection...[,]) {
		$attribute:Initialize...[$NL]
	}
}
endrule

defrule type(Attribute) trigger(attribute+Const) type(const)
public static final $type $name+format('UPPERCASE') = $default;
endrule

defrule type(Attribute) trigger(attribute+Field) !type(const) type(readonly)
private final $type $name[ = $default];
endrule

defrule type(Attribute) !type(const) !type(readOnly) trigger(attribute+Field)
private $type $name[ = $default];
endrule

defrule type(Attribute) type(const) type(field) trigger(attribute+Getter)
public $type get$name+format('ProperCase')() {
	return $name;
}
endrule

defrule type(Attribute) !type(const) trigger(attribute+Setter)
public void set$Name($type value) {
	$name = value;
}
endrule

defrule type(Attribute) type(readOnly) trigger(attribute+Injection)
$type $name
endrule

defrule type(Attribute) type(Initialize) type(readOnly)
this.$name = $name;
endrule

