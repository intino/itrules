root: {
	_type: "String"
	value: "Hola mundo";
}

root:{
 	_type: "Class"
	name: "Customer"
	final: "final"
	superclass:"Super"
	interface: ["Person","Gay"]
	attribute: [
		{
			_type: "Attribute",
			readOnly: true,
			name: "Name",
			type: "String"
		}
		{
			_type: "Attribute"
			_tags: ["ReadOnly"]
			name: "FamilyName"
			type: "String"
		}
		{
			_type: "Attribute"
			_tags: ["Const"]
			name: "MaxAge"
			type: "Integer"
			default: 100
		}
	]
}

.itr

-------------------------------------------------------------------------
rule:Class
<class name="$name" type="$type">
	$superclass+Superclass
	$interface+Interface...[$NL]

</class>
:end

rule:String +Superclass
<superclass name="$value" />
:end

rule:String +Interface
<interface name="$value" />
:end

-------------------------------------------------------------------------
:rule Class
public class [$static ][$final ]$Name [extends $SuperClass ][implements $Interface...[, ]]{
	$attribute+Const...[$NL]
	$attribute+Field...[$NL]

	$attribute+Getter...[$NL]

	public $Name($attribute+Injection...[,]) {
		$attribute:Initialize...[$NL]
	}
}
:end

rule:Attribute +Const $const
public static final $type $name+UC = $default;
end

rule:String +UC use UpperCase
$value
end

rule:Attribute +Field !$const $readonly
private final $type $name[ = $default];
end

rule:Attribute +Field !$const !$readOnly
private $type $name[ = $default];
end

rule:Attribute +Getter !$const
public $type get$Name() {
	return $name;
}
end

rule:Attribute +Setter !$const
public void set$Name($type value) {
	$name = value;
}
end

rule:Attribute +Injection $readOnly
$type $name
end

rule:Attribute +Initialize $readOnly
this.$name = $name;
end

$$
$CR $NL
$TAB
$~
$[
$]
